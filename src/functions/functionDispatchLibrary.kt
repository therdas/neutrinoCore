package functions
import base.*
import base.context.ReferenceTo
import functions.groups.arithmetic.*
import functions.groups.branch.*
import functions.groups.dataMovement.*
import functions.groups.logical.*
import functions.groups.shift.*
import functions.groups.stack.*
import hardware.*
import jdk.nashorn.internal.ir.Flags
//Summer19
//You have to kickstart the module first
var reg = RegisterFile()
var flags = reg.flags
var memory = Memory(0)

fun initFunctionsLibrary(r: RegisterFile, m: Memory) {
    reg = r
    memory = m
}

fun DispatchFunction(instr: Base8, arg: BaseN): Boolean {
    val returnValue: Boolean?

    if(!functionMap.containsKey(instr.value))
        return false

    try{
        returnValue = functionMap[instr.value]?.invoke(instr, arg)
    } catch(e: Throwable) {
        return false
    }

    return returnValue ?: false
}

val functionMap: Map<Int, (Base8, BaseN) -> Boolean> = mapOf(
        /*ACI 8-bit*/   0xCE to ::iACI,
        /*ADC A*/       0x8F to ::iADC,
        /*ADC B*/       0x88 to ::iADC,
        /*ADC C*/       0x89 to ::iADC,
        /*ADC D*/       0x8A to ::iADC,
        /*ADC E*/       0x8B to ::iADC,
        /*ADC H*/       0x8C to ::iADC,
        /*ADC L*/       0x8D to ::iADC,
        /*ADC M*/       0x8E to ::iADC,
        /*ADD A*/       0x87 to ::iADD,
        /*ADD B*/       0x80 to ::iADD,
        /*ADD C*/       0x81 to ::iADD,
        /*ADD D*/       0x82 to ::iADD,
        /*ADD E*/       0x83 to ::iADD,
        /*ADD H*/       0x84 to ::iADD,
        /*ADD L*/       0x85 to ::iADD,
        /*ADD M*/       0x86 to ::iADD,
        /*ADI 8-bit*/   0xC6 to ::iADI,
        /*ANA A*/       0xA7 to ::iANA,
        /*ANA B*/       0xA0 to ::iANA,
        /*ANA C*/       0xA1 to ::iANA,
        /*ANA D*/       0xA2 to ::iANA,
        /*ANA E*/       0xA3 to ::iANA,
        /*ANA H*/       0xA4 to ::iANA,
        /*ANA L*/       0xA5 to ::iANA,
        /*ANA M*/       0xA6 to ::iANA,
        /*ANI 8-bit*/   0xE6 to ::iANI,
        /*CALL 16-bit*/ 0xCD to ::iCALLX,
        /*CC 16-bit*/   0xDC to ::iCALLX,
        /*CM 16-bit*/   0xFC to ::iCALLX,
        /*CMA*/         0x2F to ::iCMA,
        /*CMC*/         0x3F to ::iCMC,
        /*CMP A*/       0xBF to ::iCMP,
        /*CMP B*/       0xB8 to ::iCMP,
        /*CMP C*/       0xB9 to ::iCMP,
        /*CMP D*/       0xBA to ::iCMP,
        /*CMP E*/       0xBB to ::iCMP,
        /*CMP H*/       0xBC to ::iCMP,
        /*CMP L*/       0xBD to ::iCMP,
        /*CMP M*/       0xBE to ::iCMP,
        /*CNC 16-bit*/  0xD4 to ::iCALLX,
        /*CNZ 16-bit*/  0xC4 to ::iCALLX,
        /*CP 16-bit*/   0xF4 to ::iCALLX,
        /*CPE 16-bit*/  0xEC to ::iCALLX,
        /*CPI 8-bit*/   0xFE to ::iCMI,
        /*CPO 16-bit*/  0xE4 to ::iCALLX,
        /*CZ 16-bit*/   0xCC to ::iCALLX,
        /*DAA*/         0x27 to ::iDAA,
        /*DAD B*/       0x09 to ::iDAD,
        /*DAD D*/       0x19 to ::iDAD,
        /*DAD H*/       0x29 to ::iDAD,
        /*DAD SP*/      0x39 to ::iDAD,
        /*DCR A*/       0x3D to ::iDCR,
        /*DCR B*/       0x05 to ::iDCR,
        /*DCR C*/       0x0D to ::iDCR,
        /*DCR D*/       0x15 to ::iDCR,
        /*DCR E*/       0x1D to ::iDCR,
        /*DCR H*/       0x25 to ::iDCR,
        /*DCR L*/       0x2D to ::iDCR,
        /*DCR M*/       0x35 to ::iDCR,
        /*DCX B*/       0x0B to ::iDCX,
        /*DCX D*/       0x1B to ::iDCX,
        /*DCX H*/       0x2B to ::iDCX,
        /*DCX SP*/      0x3B to ::iDCX,
        /*DI*/          0xF3 to ::dummyFunction,    //fine for these to be dummyFunction
        /*EI*/          0xFB to ::dummyFunction,    //Implement in later versions
        /*HLT*/         0x76 to ::dummyFunction,
        /*IN 8-Bit*/    0xDB to ::dummyFunction,
        /*INR A*/       0x3C to ::iINR,
        /*INR B*/       0x04 to ::iINR,
        /*INR C*/       0x0C to ::iINR,
        /*INR D*/       0x14 to ::iINR,
        /*INR E*/       0x1C to ::iINR,
        /*INR H*/       0x24 to ::iINR,
        /*INR L*/       0x2C to ::iINR,
        /*INR M*/       0x34 to ::iINR,
        /*INX B*/       0x03 to ::iINX,
        /*INX D*/       0x13 to ::iINX,
        /*INX H*/       0x23 to ::iINX,
        /*INX SP*/      0x33 to ::iINX,
        /*JC 16-bit*/   0xDA to ::iJMP,
        /*JM 16-bit*/   0xFA to ::iJMP,
        /*JMP 16-bit*/  0xC3 to ::iJMP,
        /*JNC 16-bit*/  0xD2 to ::iJMP,
        /*JNZ 16-bit*/  0xC2 to ::iJMP,
        /*JP 16-bit*/   0xF2 to ::iJMP,
        /*JPE 16-bit*/  0xEA to ::iJMP,
        /*JPO 16-bit*/  0xE2 to ::iJMP,
        /*JZ 16-bit*/   0xCA to ::iJMP,
        /*LDA 16-bit*/  0x3A to ::iLDA,
        /*LDAX B*/      0x0A to ::iLDAX,
        /*LDAX D*/      0x1A to ::iLDAX,
        /*LHLD 16-bit*/ 0x2A to ::iLHLD,
        /*LXI B 16-bit*/0x01 to ::iLXI,
        /*LXI D*/       0x11 to ::iLXI,
        /*LXI H 16-bit*/0x21 to ::iLXI,
       /*LXI SP 16-bit*/0x31 to ::iLXI,
        /*MOV A A*/     0x7F to ::iMOV,
        /*MOV A B*/     0x78 to ::iMOV,
        /*MOV A C*/     0x79 to ::iMOV,
        /*MOV A D*/     0x7A to ::iMOV,
        /*MOV A E*/     0x7B to ::iMOV,
        /*MOV A H*/     0x7C to ::iMOV,
        /*MOV A L*/     0x7D to ::iMOV,
        /*MOV A M*/     0x7E to ::iMOV,
        /*MOV B A*/     0x47 to ::iMOV,
        /*MOV B B*/     0x40 to ::iMOV,
        /*MOV B C*/     0x41 to ::iMOV,
        /*MOV B D*/     0x42 to ::iMOV,
        /*MOV B E*/     0x43 to ::iMOV,
        /*MOV B H*/     0x44 to ::iMOV,
        /*MOV B L*/     0x45 to ::iMOV,
        /*MOV B M*/     0x46 to ::iMOV,
        /*MOV C A*/     0x4F to ::iMOV,
        /*MOV C B*/     0x48 to ::iMOV,
        /*MOV C C*/     0x49 to ::iMOV,
        /*MOV C D*/     0x4A to ::iMOV,
        /*MOV C E*/     0x4B to ::iMOV,
        /*MOV C H*/     0x4C to ::iMOV,
        /*MOV C L*/     0x4D to ::iMOV,
        /*MOV C M*/     0x4E to ::iMOV,
        /*MOV D A*/     0x57 to ::iMOV,
        /*MOV D B*/     0x50 to ::iMOV,
        /*MOV D C*/     0x51 to ::iMOV,
        /*MOV D D*/     0x52 to ::iMOV,
        /*MOV D E*/     0x53 to ::iMOV,
        /*MOV D H*/     0x54 to ::iMOV,
        /*MOV D L*/     0x55 to ::iMOV,
        /*MOV D M*/     0x56 to ::iMOV,
        /*MOV E A*/     0x5F to ::iMOV,
        /*MOV E B*/     0x58 to ::iMOV,
        /*MOV E C*/     0x59 to ::iMOV,
        /*MOV E D*/     0x5A to ::iMOV,
        /*MOV E E*/     0x5B to ::iMOV,
        /*MOV E H*/     0x5C to ::iMOV,
        /*MOV E L*/     0x5D to ::iMOV,
        /*MOV E M*/     0x5E to ::iMOV,
        /*MOV H A*/     0x67 to ::iMOV,
        /*MOV H B*/     0x60 to ::iMOV,
        /*MOV H C*/     0x61 to ::iMOV,
        /*MOV H D*/     0x62 to ::iMOV,
        /*MOV H E*/     0x63 to ::iMOV,
        /*MOV H H*/     0x64 to ::iMOV,
        /*MOV H L*/     0x65 to ::iMOV,
        /*MOV H M*/     0x66 to ::iMOV,
        /*MOV L A*/     0x6F to ::iMOV,
        /*MOV L B*/     0x68 to ::iMOV,
        /*MOV L C*/     0x69 to ::iMOV,
        /*MOV L D*/     0x6A to ::iMOV,
        /*MOV L E*/     0x6B to ::iMOV,
        /*MOV L H*/     0x6C to ::iMOV,
        /*MOV L L*/     0x6D to ::iMOV,
        /*MOV L M*/     0x6E to ::iMOV,
        /*MOV M A*/     0x77 to ::iMOV,
        /*MOV M B*/     0x70 to ::iMOV,
        /*MOV M C*/     0x71 to ::iMOV,
        /*MOV M D*/     0x72 to ::iMOV,
        /*MOV M E*/     0x73 to ::iMOV,
        /*MOV M H*/     0x74 to ::iMOV,
        /*MOV M L*/     0x75 to ::iMOV,
        /*MVI A 8-bit*/ 0x3E to ::iMVI,
        /*MVI B 8-bit*/ 0x06 to ::iMVI,
        /*MVI C 8-bit*/ 0x0E to ::iMVI,
        /*MVI D 8-bit*/ 0x16 to ::iMVI,
        /*MVI E 8-bit*/ 0x1E to ::iMVI,
        /*MVI H 8-bit*/ 0x26 to ::iMVI,
        /*MVI L 8-bit*/ 0x2E to ::iMVI,
        /*MVI M 8-bit*/ 0x36 to ::iMVI,
        /*NOP*/         0x00 to ::dummyFunction,    //No need to implement
        /*ORA A*/       0xB7 to ::iORA,
        /*ORA B*/       0xB0 to ::iORA,
        /*ORA C*/       0xB1 to ::iORA,
        /*ORA D*/       0xB2 to ::iORA,
        /*ORA E*/       0xB3 to ::iORA,
        /*ORA H*/       0xB4 to ::iORA,
        /*ORA L*/       0xB5 to ::iORA,
        /*ORA M*/       0xB6 to ::iORA,
        /*ORI 8-bit*/   0xF6 to ::iORI,
        /*OUT 8-bit*/   0xD3 to ::dummyFunction,    //No need to implement, yet
        /*PCHL*/        0xE9 to ::iPCHL,
        /*POP B*/       0xC1 to ::iPOP,
        /*POP D*/       0xD1 to ::iPOP,
        /*POP H*/       0xE1 to ::iPOP,
        /*POP PSW*/     0xF1 to ::iPOP,
        /*PUSH B*/      0xC5 to ::iPUSH,
        /*PUSH D*/      0xD5 to ::iPUSH,
        /*PUSH H*/      0xE5 to ::iPUSH,
        /*PUSH PSW*/    0xF5 to ::iPUSH,
        /*RAL*/         0x17 to ::iRAL,
        /*RAR*/         0x1F to ::iRAR,
        /*RC*/          0xD8 to ::iRETX,
        /*RET*/         0xC9 to ::iRETX,
        /*RIM*/         0x20 to ::iRETX,    //Can keep unimplemented
        /*RLC*/         0x07 to ::iRLC,
        /*RM*/          0xF8 to ::iRETX,
        /*RNC*/         0xD0 to ::iRETX,
        /*RNZ*/         0xC0 to ::iRETX,
        /*RP*/          0xF0 to ::iRETX,
        /*RPE*/         0xE8 to ::iRETX,
        /*RPO*/         0xE0 to ::iRETX,
        /*RRC*/         0x0F to ::iRRC,
        /*RST 0*/       0xC7 to ::iRST,
        /*RST 1*/       0xCF to ::iRST,
        /*RST 2*/       0xD7 to ::iRST,
        /*RST 3*/       0xDF to ::iRST,
        /*RST 4*/       0xE7 to ::iRST,
        /*RST 5*/       0xEF to ::iRST,
        /*RST 6*/       0xF7 to ::iRST,
        /*RST 7*/       0xFF to ::iRST,
        /*RZ*/          0xC8 to ::iRETX,
        /*SBB A*/       0x9F to ::iSBB,
        /*SBB B*/       0x98 to ::iSBB,
        /*SBB C*/       0x99 to ::iSBB,
        /*SBB D*/       0x9A to ::iSBB,
        /*SBB E*/       0x9B to ::iSBB,
        /*SBB H*/       0x9C to ::iSBB,
        /*SBB L*/       0x9D to ::iSBB,
        /*SBB M*/       0x9E to ::iSBB,
        /*SBI 8-bit*/   0xDE to ::iSBI,
        /*SHLD 16-bit*/ 0x22 to ::iSHLD,
        /*SIM*/         0x30 to ::dummyFunction,    //No need to implement... yet.
        /*SPHL*/        0xF9 to ::iSPHL,        //TODO if you do implement SIM, implement a mask reg
        /*STA 16-bit*/  0x32 to ::iSTA,
        /*STAX B*/      0x02 to ::iSTAX,
        /*STAX D*/      0x12 to ::iSTAX,
        /*STC*/         0x37 to ::iSTC,
        /*SUB A*/       0x97 to ::iSUB,
        /*SUB B*/       0x90 to ::iSUB,
        /*SUB C*/       0x91 to ::iSUB,
        /*SUB D*/       0x92 to ::iSUB,
        /*SUB E*/       0x93 to ::iSUB,
        /*SUB H*/       0x94 to ::iSUB,
        /*SUB L*/       0x95 to ::iSUB,
        /*SUB M*/       0x96 to ::iSUB,
        /*SUI 8-bit*/   0xD6 to ::iSUI,
        /*XCHG*/        0xEB to ::iXCHG,
        /*XRA A*/       0xAF to ::iXRA,
        /*XRA B*/       0xA8 to ::iXRA,
        /*XRA C*/       0xA9 to ::iXRA,
        /*XRA D*/       0xAA to ::iXRA,
        /*XRA E*/       0xAB to ::iXRA,
        /*XRA H*/       0xAC to ::iXRA,
        /*XRA L*/       0xAD to ::iXRA,
        /*XRA M*/       0xAE to ::iXRA,
        /*XRI 8-bit*/   0xEE to ::iXRI,
        /*XTHL*/        0xE3 to ::iXTHL     //TODO Correct return from always true
)